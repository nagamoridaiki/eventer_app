<!DOCTYPE html>
<html lang="ja">

<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>
        <%= data.title %>
    </title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" crossorigin="anonymous">
    <link rel='stylesheet' href='../../public/stylesheets/style.css' />
    <link rel="stylesheet" type="text/css" href="../../public/stylesheets/payment.css">
</head>

<body>
<header>
        <img src="https://eventernagamori.s3-ap-northeast-1.amazonaws.com/fixedImage/eventDetail.png %>"  width="100%" height="100%" class="flex-row-reverse"/>
</header>

<h2><%= data.event.title %></h2>
<hr class="mt-0 mb-2">
<p><%= data.event.subTitle %></p>
<nav>
    <ul class="list-inline">
        <% if (data.event.Tag!=null) { for (let i in data.event.Tag) { %>
            <li class="list-inline-item bg-info text-white p-1" style="border-radius: 0.7em;"><%= data.event.Tag[i].name %></li>
        <% }} %>
    </ul>
</nav>

<div class="row">

    <div class="col-6">
        <%if (data.event.image != null) {%>
            <img src="https://eventernagamori.s3-ap-northeast-1.amazonaws.com/events/<%= data.event.image %>" width="20%" height="20%" class="flex-row-reverse"/>
        <% } else {%>
            <img src="https://eventernagamori.s3-ap-northeast-1.amazonaws.com/fixedImage/noimage-1.jpg" width="30%" height="30%" class="flex-row-reverse"/>
        <% } %>    
        <div class="tab-content bg-light p-3">
            <%= data.event.detail %>
        </div>
        主催
        <hr class="mt-0 mb-2">
        <div class="tab-content bg-light p-3">
            <%if (data.writter.image != null) {%>
                <img src="https://eventernagamori.s3-ap-northeast-1.amazonaws.com/users/<%= data.writter.image %>" width="5%" height="5%" class="flex-row-reverse rounded-circle"/>
            <% } else { %>
                <img src="https://eventernagamori.s3-ap-northeast-1.amazonaws.com/fixedImage/noperson.jpg" width="5%" height="5%" class="flex-row-reverse rounded-circle"/>
            <% } %>    
            <a href="/user/<%= data.writter.id %>"><%= data.writter.name %></a>
        </div>
        参加人数
        <hr class="mt-0 mb-2">
        <div class="tab-content bg-light p-3">
            <%= data.event.User.length %>/<%= data.event.capacity %>(定員)
        </div>
        料金
            <hr class="mt-0 mb-2">
            <div class="tab-content bg-light p-3" id="price">
                <%= data.event.price %>
            </div>
        会場
        <hr class="mt-0 mb-2">
        <div class="tab-content bg-light p-3" id="address">
            <%= data.event.address %>
        </div>
        <div id="map"></div> 
    </div>

    <div class="col-6">
        
        <div class="container-sm">
            <!--
             * 入力フォーム関連
            -->
            <div class="payment-form-container">
                <h1> 参加申し込み </h1>
                <div class="form-group">
                    <p> お支払い : ¥<%= data.event.price %> </p>
                </div>
                <div id="card-element"><!-- input要素がここに生成される --></div>
                <div id="card-errors" role="alert"><!-- エラーメッセージがここに表示される --></div>
    
                <!-- サーバサイドの処理を待機中に表示するスピナー -->
                <div id="payment-form-spinner" class="d-flex justify-content-center">
                    <div class="spinner-border text-info collapse" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
    
                <button id="payment-form-submit" class="btn btn-outline-info shadow-sm mb-5 rounded btn-lg btn-block"> 注文を確定する </button>
    
                <!-- 決済処理後メッセージ -->
                <div id="content-payment-message collapse">
                    <div class="contents-payment-error collapse">
                        <p> 無効な決済リクエストです。 </p>
                        <button class="btn btn-outline-warning" id="return-button-error"> やり直す </button>
                    </div>
                    <div class="contents-payment-not-yet collapse">
                        <p> クレジットカード、もしくは暗証番号に誤りがあります。 </p>
                        <button class="btn btn-outline-warning" id="return-button-not-yet"> やり直す </button>
                    </div>
                    <div class="contents-payment-result collapse">
                        <p> お支払いを完了しました。 </p>
                        <button class="btn btn-outline-success" id="return-button-normal"> トップへ戻る </button>
                    </div>
                </div>
            </div>
            <div class="other-actions-container">
                <button class="btn btn-outline-secondary" id="return-button-default">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-arrow-left" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
                    </svg>
                    戻る
                </button>
            </div>
        </div>
        <script src="/src/public/javascripts/jquery-3.5.1.min.js"></script> <!-- ダウンロードしてきたjQuery -->
        <script src="/src/public/bootstrap-4.5.3-dist/js/bootstrap.min.js"></script> <!-- ダウンロードしてきたBootstrap -->
        <script src="https://js.stripe.com/v3/"></script> <!-- Stripe.jsx -->
        
        <script>
        let stripe = Stripe("pk_test_XXXXXXX");
        let elements = stripe.elements();
        let price = document.getElementById('price').textContent
        price = parseInt(price, 10);

        // 注文情報。サーバではこのJSONを受け取って処理を行う。
        let order = {
            items : [
                {
                    name : "event",
                    amount : price,
                    quantity : 1
                },
            ],
            currency : "jpy",
            paymentMethodId : null
        }

        let style = {
            base: {
            color: "#32325d",
            }
        };
        
        let card = elements.create("card", { style: style });

        card.mount("#card-element");

        card.on('change', ({error}) => {
            const displayError = document.getElementById('card-errors');
            if (error) {
            displayError.textContent = error.message;
            } else {
            displayError.textContent = '';
            }
        });

        // 注文確定ボタンのDOMを取得する
        const submitButton = document.getElementById("payment-form-submit");

        // ボタンがクリックされたら、アクションを実行
        submitButton.addEventListener("click", function(event) {
            // スピナーを表示する
            displaySpinner();

            stripe
                .createPaymentMethod("card", card) // <== ここでPromiseが返ってくるので、thenで処理を続ける
                .then(function(result){
                    if(result.error) {
                        // エラー時の処理
                        onError();
                    } else {
                        // 成功した時の処理。サーバサイドに注文情報を送信する
                        // 支払メソッドIDをリクエストデータに詰める 
                        order.paymentMethodId = result.paymentMethod.id;

                        // サーバサイドへ決済情報を渡して結果をハンドリングする
                        // サーバは http://localhost:3000/v1/order/payment にPOSTでリクエストを受け付けている
                        fetch("http://localhost:3000/v1/order/payment", {method: "POST", headers: {"Content-Type": "application/json"}, body: JSON.stringify(order)})
                        .then(function(result){
                            return result.json();  // <== HTTPレスポンスからボディをJSONを取り出して次のメソッドに引き渡す
                        })
                        .then(function(response){
                            // 正常終了。
                            onComplete(response);
                        });

                    }
                })
                .catch(function(){
                    onError();
                });
        });

        // ボタンの要素を取得
        let returnButtonNormal = document.getElementById("return-button-normal");
        let returnButtonError = document.getElementById("return-button-error");
        let returnButtonNotYet = document.getElementById("return-button-not-yet");
        let returnButtonDefault = document.getElementById("return-button-default");

        returnButtonNormal.addEventListener("click", reset);
        returnButtonError.addEventListener("click", reset);
        returnButtonNotYet.addEventListener("click", reset);
        returnButtonDefault.addEventListener("click", reset);

        function reset(event) {
            hideError();
            hideMessage();
            hideNotYetMessage();
            displayButton();

            card.mount("#card-element");
        }

        function onComplete(response){

            shutdown();

            // スピナー終了
            hideSpinner();

            if(response.error) {
                onError();
            } else if (response.paymentIntentStatus === "succeeded") {
                // 確定ボタンを消して完了メッセージを表示
                displayMessage();
            } else {
                displayNotYetMessage();
            }
        }

        function onError() {

            shutdown();

            if(!document.querySelector(".spinner-border").classList.contains("collapse")) {
                hideSpinner();
            }
            // エラーメッセージを表示
            displayError();
            
        }

        function shutdown() {
            card.unmount();
            hideButton();
        }



        function hideSpinner() {
            document.querySelector(".spinner-border").classList.add("collapse")
        }

        function displaySpinner() {
            document.querySelector(".spinner-border").classList.remove("collapse");
        }

        // エラーメッセージ
        function hideError() {
            document.querySelector(".contents-payment-error").classList.add("collapse");
        }

        function displayError() {
            document.querySelector(".contents-payment-error").classList.remove("collapse");
        }

        // 成功メッセージ
        function displayMessage() {
            document.querySelector(".contents-payment-result").classList.remove("collapse");
        }

        function hideMessage() {
            document.querySelector(".contents-payment-result").classList.add("collapse");
        }

        function displayNotYetMessage() {
            document.querySelector(".contents-payment-not-yet").classList.remove("collapse");
        }

        function hideNotYetMessage() {
            document.querySelector(".contents-payment-not-yet").classList.add("collapse");
        }

        // 注文確定ボタン
        function hideButton() {
            document.querySelector("#payment-form-submit").classList.add("collapse");
        }

        function displayButton() {
            document.querySelector("#payment-form-submit").classList.remove("collapse");
        }

        </script>
    
    </div>

</div>



</body>


</html>